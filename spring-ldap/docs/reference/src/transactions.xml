<?xml version="1.0" encoding="UTF-8"?>
               
<chapter id="transactions">
  <title>Spring LDAP Transaction Support</title>

  <sect1 id="transactions-intro">
    <title>Introduction</title>

    <para>Programmers used to working with relational databases coming to the LDAP
    world often express surprise to the fact that there is no notion of transactions.
    It is not specified in the protocol, and thus no servers support it. 
    Recognizing that this is a major problem, Spring LDAP provides support for client-side, 
    compensating transactions on LDAP resources.
    </para>
    
	<para>LDAP transaction support is provided by <literal>ContextSourceTransactionManager</literal>, a
	<literal>PlatformTransactionManager</literal> implementation that manages Spring transaction
	support for LDAP operations. Along with its collaborators it keeps track of the LDAP operations
	performed in a transaction, making record of the state before each operation and taking steps to 
	restore the initial state should the transaction need to be rolled back.
	
	<note>It is important to note that while the above approach is sufficient for many cases,
	it is by no means &quot;real&quot; transactions in the traditional sense. The server is completely
	unaware of the transactions, so e.g. if the connection is broken there will be no hope to rollback
	the transaction. While the above should be carefully considered it should also be noted
	that the alternative will be to operate without any transaction support whatsoever; this is pretty much
	as good as it gets.</note>
    </para>
    <para>In addition to the actual transaction management, Spring LDAP transaction support also
    makes sure that the same <literal>DirContext</literal> instance will be used throughout the same transaction,
    i.e. the <literal>DirContext</literal> will not actually be closed until the transaction is finished,
    allowing for more efficient usage of resources.</para>
  </sect1>
  
  <sect1 id="transactions-configuration">
    <title>Configuration</title>
    <para>
    Configuring Spring LDAP transactions should look very familiar if you're used to configuring Spring transactions.
    You will create a <literal>TransactionManager</literal> instance and wrap your target object using a
    <literal>TransactionProxyFactoryBean</literal>. In addition to this, you will also need to wrap your
    <literal>ContextSource</literal> in a <literal>TransactionAwareContextSourceProxy</literal>.
    <informalexample>
    <programlisting>&lt;beans&gt;
   ...
   &lt;bean id="contextSourceTarget" class="org.springframework.ldap.core.support.LdapContextSource"&gt;
      &lt;property name="url" value="ldap://localhost:389" /&gt;
      &lt;property name="base" value="dc=example,dc=com" /&gt;
      &lt;property name="userDn" value="cn=Manager" /&gt;
      &lt;property name="password" value="secret" /&gt;
   &lt;/bean&gt;

   &lt;bean id="contextSource" 
            class="org.springframework.ldap.transaction.core.TransactionAwareContextSourceProxy"&gt;
      &lt;constructor-arg ref="contextSourceTarget" /&gt;
   &lt;/bean&gt;
   
   &lt;bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate"&gt;
      &lt;constructor-arg ref="contextSource" /&gt;
   &lt;/bean&gt;
   
   &lt;bean id="transactionManager" 
            class="org.springframework.ldap.transaction.core.ContextSourceTransactionManager"&gt;
      &lt;constructor-arg ref="contextSource" /&gt;
   &lt;/bean&gt;

   &lt;bean id="myDataAccessObjectTarget" class="com.example.MyDataAccessObject"&gt;
      &lt;property name="ldapTemplate" ref="ldapTemplate" /&gt;
   &lt;/bean&gt;
   
   &lt;bean id="myDataAccessObject" 
            class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"&gt;
      &lt;property name="transactionManager" ref="transactionManager" /&gt;
      &lt;property name="target" ref="myDataAccessObjectTarget" /&gt;
      &lt;property name="transactionAttributes"&gt;
         &lt;props&gt;
            &lt;prop key="*"&gt;PROPAGATION_REQUIRES_NEW&lt;/prop&gt;
         &lt;/props&gt;
      &lt;/property&gt;
   &lt;/bean&gt;
   ...</programlisting>
    </informalexample>
    In a real world example you would probably apply the transactions on the service object level
    rather than the DAO level; the above serves as an example to demonstrate the general idea.
    <note>You'll notice that the actual <literal>ContextSource</literal> and DAO instances get ids with a 
    &quot;Target&quot; suffix. The beans you will actually refer to are the Proxies that are created 
    around the targets; <literal>contextSource</literal> and <literal>myDataAccessObject</literal></note>
    </para>
  </sect1>
  <sect1 id="compensating-transactions">
  	<title>LDAP Compensating Transactions</title>
  	<para>Spring LDAP manages compensating transactions by making record of the state in the LDAP tree
  	before each modifying operation (<literal>bind</literal>, <literal>unbind</literal>, <literal>rebind</literal>, 
  	<literal>modifyAttributes</literal>, and <literal>rename</literal>).</para>
  	<para>This enables the system
  	to perform compensating operations should the transaction need to be rolled back. In many cases the
  	compensating operation is pretty straightforward. E.g. the compensating rollback operation for a 
  	<literal>bind</literal> operation will quite obviously be to unbind the entry. Other operations however require
  	a different, more complicated approach because of some particular characteristics of LDAP databases. Specifically,
  	it is not always possible to get the values of all <literal>Attributes</literal> of an entry, making the above
  	strategy insufficient for e.g. an <literal>unbind</literal> operation.</para>
  	<para>This is why each modifying operation performed within a Spring LDAP managed transaction is internally
  	split up in four distinct operations - a recording operation, a preparation operation, a commit operation, 
  	and a rollback operation. The specifics for each LDAP operation is described in the table below:</para>
	<table frame="all">
	  <tgroup cols='5' align='left' colsep='1' rowsep='1'>
	  <colspec colname="c1" />
	  <colspec colname="c2" />
	  <colspec colname="c3" />
	  <colspec colname="c4" />
	  <colspec colname="c5" />
	  <thead>
	    <row>
	      <entry>LDAP Operation</entry>
	      <entry>Recording</entry>
	      <entry>Preparation</entry>
	      <entry>Commit</entry>
	      <entry>Rollback</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Bind</entry>
	      <entry>Make record of the DN of the entry to bind.</entry>
	      <entry>Bind the entry.</entry>
	      <entry>No operation.</entry>
	      <entry>Unbind the entry using the recorded DN.</entry>
	    </row>
	    <row>
	      <entry>Rename</entry>
	      <entry>Make record of the original and target DN.</entry>
	      <entry>Rename the entry.</entry>
	      <entry>No operation.</entry>
	      <entry>Rename the entry back to its original DN.</entry>
	    </row>
	   	<row>
	      <entry>Unbind</entry>
	      <entry>Make record of the original DN and calculate a temporary DN.</entry>
	      <entry>Rename the entry to the temporary location.</entry>
	      <entry>Unbind the temporary entry.</entry>
	      <entry>Rename the entry from the temporary location back to its original DN.</entry>
	    </row>
	    <row>
	      <entry>Rebind</entry>
	      <entry>Make record of the original DN and the new <literal>Attributes</literal>, and calculate a temporary DN.</entry>
	      <entry>Rename the entry to a temporary location.</entry>
	      <entry>Bind the new <literal>Attributes</literal> at the original DN, and unbind the original entry
	      from its temporary location.</entry>
	      <entry>Rename the entry from the temporary location back to its original DN.</entry>
	    </row>
	    <row>
	      <entry>ModifyAttributes</entry>
	      <entry>Make record of the DN of the entry to modify and calculate compensating <literal>ModificationItem</literal>s
	      for the modifications to be done.</entry>
	      <entry>Perform the <literal>modifyAttributes</literal> operation.</entry>
	      <entry>No operation.</entry>
	      <entry>Perform a <literal>modifyAttributes</literal> operation using the calculated compensating
	      <literal>ModificationItem</literal>s.</entry>
	    </row>
	  </tbody>
	  </tgroup>
	</table>
	<para>A more detailed description of the internal workings of the Spring LDAP transaction support is available in the
	javadocs.</para>
  </sect1>
</chapter>