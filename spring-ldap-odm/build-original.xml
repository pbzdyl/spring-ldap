<project name="odm" basedir="." xmlns:ivy="antlib:fr.jayasoft.ivy.ant" default="info">
  
    <xmlproperty file="build-properties.xml" keeproot="false" semanticattributes="true" collapseattributes="true"/>

    <target name="-info">
        <echoproperties/>
    </target>

    <taskdef resource="fr/jayasoft/ivy/ant/antlib.xml" uri="antlib:fr.jayasoft.ivy.ant">
        <classpath>
            <fileset dir="${config.ivy}">
                <include name="*.jar"/>
            </fileset>
        </classpath>
    </taskdef>


    <target name="-coverage.init" unless="coverage.init.done">
        <path id="coverage.classpath">
            <fileset dir="${build.lib.tasks}" includes="**/*.jar"/>
        </path>

        <delete dir="${build.coverage.instrumented}"/>
        <delete dir="${build.coverage.output}"/>
        <delete dir="${build.coverage.reports}"/>
        <delete file="${build.coverage.datafile}"/>

        <mkdir dir="${build.coverage.instrumented}"/>
        <mkdir dir="${build.coverage}"/>
        <mkdir dir="${build.coverage.output}"/>
        <mkdir dir="${build.coverage.reports}"/>

        <delete dir="${build.coverage}"/>
        <mkdir dir="${build.coverage}"/>
        <property name="coverage.init.done" value="true"/>
    </target>

    <target name="-coverage.instrument">
        <fail unless="build.coverage.datafile"/>
        <fail unless="build.main.classes"/>
        <fail unless="build.coverage.instrumented"/>
        <mkdir dir="${build.main.classes}"/>
        <mkdir dir="${build.coverage.instrumented}"/>

        <cobertura-instrument datafile="${build.coverage.datafile}"
                              toDir="${build.coverage.instrumented}">
            <fileset dir="${build.main.classes}"
                     includes="**/*.class"/>
        </cobertura-instrument>
    </target>

    <target name="-clean">
        <mkdir dir="${build}"/>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build}">
                <include name="**/*"/>
            </fileset>
        </delete>
    </target>

    <target name="-taskdef">
        <path id="tasks.lib">
            <fileset dir="lib">
                <include name="*.jar"/>
            </fileset>
        </path>
        <taskdef resource="checkstyletask.properties" classpathref="tasks.lib"/>
        <taskdef resource="tasks.properties" classpathref="tasks.lib"/>
        <taskdef resource="testngtasks" classpathref="tasks.lib"/>
    </target>

    <target name="-checkstyle">
        <mkdir dir="${build.checkstyle.reports}"/>
        <checkstyle config="${config.checkstyle}/main-checkstyle.xml" failonviolation="true">
            <formatter type="plain" toFile="${build.checkstyle.reports}/main-checkstyle-report.txt"/>
            <fileset dir="${source.main.java}">
                <include name="**/*.java"/>
            </fileset>
            <property key="checkstyle.import.control.file" value="main-import-control.xml"/>
        </checkstyle>

        <checkstyle config="${config.checkstyle}/test-checkstyle.xml" failonviolation="true">
            <formatter type="plain" toFile="${build.checkstyle.reports}/test-checkstyle-report.txt"/>
            <fileset dir="${source.test.java}">
                <include name="**/*.java"/>
            </fileset>
        </checkstyle>
    </target>

    <target name="-compile">
        <mkdir dir="${build.main.classes}"/>
        <mkdir dir="${build.test.classes}"/>
        <javac srcdir="${source.main.java}" destdir="${build.main.classes}" debug="true" fork="true" source="1.5"
               target="1.5">
            <classpath>
                <fileset dir="lib">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </javac>
        <javac srcdir="${source.test.java}" destdir="${build.test.classes}" debug="true" fork="true" source="1.5"
               target="1.5">
            <classpath>
                <fileset dir="lib">
                    <include name="*.jar"/>
                </fileset>
                <pathelement location="${build.main.classes}"/>
            </classpath>
        </javac>
    </target>

    <target name="-unit-test">
        <testng outputdir="${build.test.reports}" haltonfailure="false"
                failureproperty="unit.tests.failed">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${build.coverage.datafile}"/>
            <classpath>
                <pathelement location="${build.coverage.instrumented}"/>
                <pathelement location="${build.main.classes}"/>
                <pathelement location="${build.test.classes}"/>
                <pathelement location="${source.main.config}"/>
                <fileset dir="lib" includes="*.jar"/>
            </classpath>

            <xmlfileset dir="${source.test.config}/testng" includes="unittest.xml"/>
        </testng>

        <junitreport todir="${build.test.reports}">
            <fileset dir="${build.test.reports}/unit-tests" includes="*xml"/>
            <report format="noframes" todir="${build.test.reports}/unit-tests"/>
        </junitreport>
    </target>


    <target name="-cobertura-report">
        <cobertura-report datafile="${build.coverage.datafile}"
                          srcdir="${source.main.java}"
                          destdir="${build.coverage.reports}"/>
    </target>

    <target name="-evaluate-build">
        <fail if="unit.tests.failed"/>
        <fail if="functional.tests.failed"/>
    </target>


    <target name="-package">
        <mkdir dir="${build.main.artifacts}"/>

        <zip file="${build.main.artifacts}/odm-source.zip">
            <fileset dir="${source.main.java}" includes="**/*.java"/>
        </zip>
                
        <jar file="${build.main.artifacts}/odm.jar">
            <fileset dir="${build.main.classes}" includes="**/*.class"/>
        </jar>


    </target>

    <!-- private targets -->
    <target name="--info" depends="-info"/>
    <target name="--build"
            depends="-clean, -taskdef, -checkstyle, -compile, -package, -coverage.init, -coverage.instrument, -unit-test, -cobertura-report, -evaluate-build"/>

    <!-- public targets -->
    <target name="info" depends="--info" description="-- echo the common and user specified build properties"/>
    <target name="build" depends="--build"
            description="-- clean, configure, compile and produce build artifacts"/>
</project>
